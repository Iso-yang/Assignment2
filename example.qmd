---
title: "Assignment2"
format: html
editor: visual
---

# Introduction

This guide demonstrates my understanding of Git, GitHub, and the command-line interface in the context of reproducible research using RStudio and Quarto.

# Step 1: Create a new RStudio Project and a Quarto file

I created a new RStudio project named `Assignment2`.
In the project, I created a file called "example.qmd" and made it knitted into an HTML file by adding format: html.
![](images/HTML_file.jpg)

# Step 2: Initialise the Git repository and push to GitHub

git init: Initialize a Git repository in the current folder. Git starts tracking files and version history.   
git add .: Add all changes in the current directory to the staging area.  
git commit -m "Initial commit": Submit the contents of the staging area as a new version.  
git branch -M main: Rename the current branch to main.   
git remote add origin git\@github.com:Iso-yang/Assignment2.git: Add a remote repository named origin. Link the local and remote repositories.  
git push -u origin main: Push the local main branch code to the remote repository origin.


# Step 3: Create a new branch and modify example.qmd.

git checkout -b testbranch: Create a new branch called testbranch.  
Modify some content in testbranch, then commit and push these changes
git add example.qmd   
git commit -m "Modified qmd in testbranch"   
git push origin testbranch: Pushed the testbranch branch to the remote repository.


# Step 4: Add data folder and amend commit

Create a folder called data, and add the data from Assignment 1 to that folder.  
git add .   
git commit -m"create a folder"   
git push origin testbranch.


# Step 5: Make conflicting change on main

git checkout main:  Switched to branch 'main'
Switch back to the main branch and modify example.qmd in a different way such that it will conflict with testbranch.

git add example.qmd.  
git commit -m "Conflicting change in main".  
git push origin main



# Step 6: Merge and resolve conflict

Modify the content on the same line in testbranch and main, and then merge them. The following conflict occurs:
![](images/conflict.jpg) 

git add .  
git commit -m"main"   
git push origin main. 

Make changes to the main branch and delete the testbranch branch content. After resolving the conflicts, commit the merge and all the files in testbranch have been merged with the main branch.


# Step 7: Tag the commit

git tag -a v1.0 -m "Version 1.0"：Create an annotation tag named v1.0.  
git push origin v1.0：Push tags to remote repository.


# Step 8: Delete testbranch
git branch -d testbranch：Deleting a local branch. 
git push origin --delete testbranch: Deleting a remote branch.


# Step 9: Show commit log

git log --oneline --graph --all: show commit log
![](images/log.png)

# Step 10: Undo commit but keep changes
Create a new section in example.qmd that includes an easy to make plot. 

Commit the changes:
git add example.qmd. 
git commit -m "Added plot section" 
git reset --soft HEAD~1
Now the changes are still in staging area but the commit is undone.
